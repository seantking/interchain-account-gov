// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: inter-tx/inter-tx-proposal.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterProposal struct {
	Title       string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// the port on which the packet will be sent
	SourcePort string `protobuf:"bytes,3,opt,name=source_port,json=sourcePort,proto3" json:"source_port,omitempty" yaml:"source_port"`
	// the channel by which the packet will be sent
	SourceChannel string                                        `protobuf:"bytes,4,opt,name=source_channel,json=sourceChannel,proto3" json:"source_channel,omitempty" yaml:"source_channel"`
	Sender        github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,5,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
}

func (m *MsgRegisterProposal) Reset()         { *m = MsgRegisterProposal{} }
func (m *MsgRegisterProposal) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterProposal) ProtoMessage()    {}
func (*MsgRegisterProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_90fce31c676c4143, []int{0}
}
func (m *MsgRegisterProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterProposal.Merge(m, src)
}
func (m *MsgRegisterProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterProposal proto.InternalMessageInfo

func (m *MsgRegisterProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgRegisterProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgRegisterProposal) GetSourcePort() string {
	if m != nil {
		return m.SourcePort
	}
	return ""
}

func (m *MsgRegisterProposal) GetSourceChannel() string {
	if m != nil {
		return m.SourceChannel
	}
	return ""
}

func (m *MsgRegisterProposal) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func init() {
	proto.RegisterType((*MsgRegisterProposal)(nil), "cosmos_sdk_interchain_account.x.inter_tx.v1.MsgRegisterProposal")
}

func init() { proto.RegisterFile("inter-tx/inter-tx-proposal.proto", fileDescriptor_90fce31c676c4143) }

var fileDescriptor_90fce31c676c4143 = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0x3d, 0x4f, 0xc2, 0x40,
	0x18, 0xe6, 0x50, 0x88, 0x1e, 0x68, 0x4c, 0xfd, 0x48, 0x75, 0x68, 0x49, 0x07, 0x43, 0x62, 0xda,
	0x86, 0x38, 0x68, 0x98, 0x04, 0x5d, 0x1c, 0x4c, 0x48, 0x47, 0x07, 0x9b, 0x72, 0xbd, 0x94, 0x0b,
	0xa5, 0xd7, 0xdc, 0x1d, 0x06, 0xfe, 0x81, 0xa3, 0xa3, 0x23, 0xff, 0x46, 0x47, 0x46, 0xa7, 0xc6,
	0xc0, 0x3f, 0x60, 0x74, 0x32, 0xdc, 0xd5, 0x50, 0x9d, 0xee, 0x7d, 0x9f, 0xaf, 0x37, 0xb9, 0x07,
	0x36, 0x48, 0x22, 0x30, 0xb3, 0xc5, 0xc4, 0xfd, 0x1d, 0xec, 0x94, 0xd1, 0x94, 0xf2, 0x20, 0x76,
	0x52, 0x46, 0x05, 0xd5, 0x2e, 0x10, 0xe5, 0x23, 0xca, 0x7d, 0x1e, 0x0e, 0x7d, 0xa9, 0x41, 0x83,
	0x80, 0x24, 0x7e, 0x80, 0x10, 0x1d, 0x27, 0xc2, 0x99, 0x38, 0x12, 0xf4, 0xc5, 0xc4, 0x79, 0x6e,
	0x9d, 0x1d, 0x45, 0x34, 0xa2, 0xd2, 0xe7, 0xae, 0x27, 0x15, 0x61, 0xbd, 0x97, 0xe1, 0xe1, 0x03,
	0x8f, 0x3c, 0x1c, 0x11, 0x2e, 0x30, 0xeb, 0xe5, 0x07, 0xb4, 0x73, 0x58, 0x11, 0x44, 0xc4, 0x58,
	0x07, 0x0d, 0xd0, 0xdc, 0xed, 0x1e, 0xac, 0x32, 0xb3, 0x3e, 0x0d, 0x46, 0x71, 0xdb, 0x92, 0xb0,
	0xe5, 0x29, 0x5a, 0xbb, 0x86, 0xb5, 0x10, 0x73, 0xc4, 0x48, 0x2a, 0x08, 0x4d, 0xf4, 0xb2, 0x54,
	0x9f, 0xac, 0x32, 0x53, 0x53, 0xea, 0x02, 0x69, 0x79, 0x45, 0xa9, 0x76, 0x05, 0x6b, 0x9c, 0x8e,
	0x19, 0xc2, 0x7e, 0x4a, 0x99, 0xd0, 0xb7, 0xfe, 0x3b, 0x0b, 0xa4, 0xe5, 0x41, 0xb5, 0xf5, 0x28,
	0x13, 0xda, 0x0d, 0xdc, 0xcf, 0x39, 0x34, 0x08, 0x92, 0x04, 0xc7, 0xfa, 0xb6, 0xf4, 0x9e, 0xae,
	0x32, 0xf3, 0xf8, 0x8f, 0x37, 0xe7, 0x2d, 0x6f, 0x4f, 0x01, 0xb7, 0x6a, 0xd7, 0xee, 0x61, 0x95,
	0xe3, 0x24, 0xc4, 0x4c, 0xaf, 0x34, 0x40, 0xb3, 0xde, 0x6d, 0x7d, 0x67, 0xa6, 0x1d, 0x11, 0x31,
	0x18, 0xf7, 0x1d, 0x44, 0x47, 0xae, 0xfa, 0xd6, 0xfc, 0xb1, 0x79, 0x38, 0x74, 0xc5, 0x34, 0xc5,
	0xdc, 0xe9, 0x20, 0xd4, 0x09, 0x43, 0x86, 0x39, 0xf7, 0xf2, 0x80, 0xf6, 0xce, 0xcb, 0xcc, 0x04,
	0x6f, 0x33, 0x13, 0x74, 0x9f, 0x3e, 0x16, 0x06, 0x98, 0x2f, 0x0c, 0xf0, 0xb5, 0x30, 0xc0, 0xeb,
	0xd2, 0x28, 0xcd, 0x97, 0x46, 0xe9, 0x73, 0x69, 0x94, 0x1e, 0xef, 0x8a, 0xd1, 0xeb, 0x86, 0x82,
	0x94, 0x93, 0x62, 0xbc, 0xbd, 0x29, 0xcf, 0xce, 0xcb, 0x73, 0x37, 0xad, 0xab, 0xe3, 0xfd, 0xaa,
	0x2c, 0xec, 0xf2, 0x27, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x09, 0xc2, 0xa4, 0x17, 0x02, 0x00, 0x00,
}

func (m *MsgRegisterProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintInterTxProposal(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SourceChannel) > 0 {
		i -= len(m.SourceChannel)
		copy(dAtA[i:], m.SourceChannel)
		i = encodeVarintInterTxProposal(dAtA, i, uint64(len(m.SourceChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourcePort) > 0 {
		i -= len(m.SourcePort)
		copy(dAtA[i:], m.SourcePort)
		i = encodeVarintInterTxProposal(dAtA, i, uint64(len(m.SourcePort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintInterTxProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintInterTxProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintInterTxProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovInterTxProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovInterTxProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovInterTxProposal(uint64(l))
	}
	l = len(m.SourcePort)
	if l > 0 {
		n += 1 + l + sovInterTxProposal(uint64(l))
	}
	l = len(m.SourceChannel)
	if l > 0 {
		n += 1 + l + sovInterTxProposal(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovInterTxProposal(uint64(l))
	}
	return n
}

func sovInterTxProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInterTxProposal(x uint64) (n int) {
	return sovInterTxProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInterTxProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterTxProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterTxProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterTxProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterTxProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInterTxProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInterTxProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInterTxProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInterTxProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInterTxProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterTxProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInterTxProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInterTxProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInterTxProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInterTxProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInterTxProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInterTxProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInterTxProposal = fmt.Errorf("proto: unexpected end of group")
)
